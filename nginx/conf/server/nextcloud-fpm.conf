# vi: set ft=nginx
# adapted from: https://docs.nextcloud.com/server/latest/admin_manual/installation/nginx.html#nextcloud-in-the-webroot-of-nginx

# Path to root of installation
root /var/www/html;

# Prevent nginx HTTP Server Detection
server_tokens off;

# HSTS settings
#add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always;

# set max upload size and increase upload timeout
client_max_body_size 512M;
client_body_timeout 300s;
fastcgi_buffers 64 4k;

# Enable gzip but do not remove ETag headers
gzip on;
gzip_vary on;
gzip_comp_level 4;
gzip_min_length 256;
gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
gzip_types application/atom+xml text/javascript application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/wasm application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;

# The settings allows you to optimize the HTTP2 bandwidth.
# See https://blog.cloudflare.com/delivering-http-2-upload-speed-improvements/
# for tuning hints
client_body_buffer_size 512k;

# HTTP response headers borrowed from Nextcloud `.htaccess`
add_header Referrer-Policy                   "no-referrer"       always;
add_header X-Content-Type-Options            "nosniff"           always;
add_header X-Frame-Options                   "SAMEORIGIN"        always;
add_header X-Permitted-Cross-Domain-Policies "none"              always;
add_header X-Robots-Tag                      "noindex, nofollow" always;
add_header X-XSS-Protection                  "1; mode=block"     always;

index index.php index.html /index.php$request_uri;

# Rule borrowed from `.htaccess` to handle Microsoft DAV clients
location = / {
  if ( $http_user_agent ~ ^DavClnt ) {
    return 302 /remote.php/webdav/$is_args$args;
  }
}

location = /robots.txt {
  allow all;
  log_not_found off;
  access_log off;
}

# Make a regex exception for `/.well-known` so that clients can still
# access it despite the existence of the regex rule
# `location ~ /(\.|autotest|...)` which would otherwise handle requests
# for `/.well-known`.
location ^~ /.well-known {
  # The rules in this block are an adaptation of the rules
  # in `.htaccess` that concern `/.well-known`.

  location = /.well-known/carddav { return 301 /remote.php/dav/; }
  location = /.well-known/caldav  { return 301 /remote.php/dav/; }

  location /.well-known/acme-challenge    { try_files $uri $uri/ =404; }
  location /.well-known/pki-validation    { try_files $uri $uri/ =404; }

  # Let Nextcloud's API for `/.well-known` URIs handle all other
  # requests by passing them to the front-end controller.
  return 301 /index.php$request_uri;
}

# Ensure this block, which passes PHP files to the PHP process, is above the blocks
# which handle static assets (as seen below). If this block is not declared first,
# then Nginx will encounter an infinite rewriting loop when it prepends `/index.php`
# to the URI, resulting in a HTTP 500 error response.
location ~ \.php(?:$|/) {
  # Required for legacy support
  rewrite ^/(?!index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|ocs-provider\/.+|.+\/richdocumentscode(_arm64)?\/proxy) /index.php$request_uri;

  fastcgi_split_path_info ^(.+?\.php)(/.*)$;
  set $path_info $fastcgi_path_info;

  try_files $fastcgi_script_name =404;

  include fastcgi_params;
  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
  fastcgi_param PATH_INFO $path_info;
  fastcgi_param HTTPS on;

  fastcgi_param modHeadersAvailable true;     # Avoid sending the security headers twice
  fastcgi_param front_controller_active true; # Enable pretty urls
  fastcgi_pass app;

  fastcgi_intercept_errors on;
  fastcgi_request_buffering off;

  fastcgi_max_temp_file_size 0;
}

# Serve static files
location ~ \.(?:css|js|mjs|svg|gif|png|jpg|ico|wasm|tflite|map|ogg|flac)$ {
  try_files $uri /index.php$request_uri;
  # HTTP response headers borrowed from Nextcloud `.htaccess`
  add_header Cache-Control                     "public, max-age=15778463$asset_immutable";
  add_header Referrer-Policy                   "no-referrer"       always;
  add_header X-Content-Type-Options            "nosniff"           always;
  add_header X-Frame-Options                   "SAMEORIGIN"        always;
  add_header X-Permitted-Cross-Domain-Policies "none"              always;
  add_header X-Robots-Tag                      "noindex, nofollow" always;
  add_header X-XSS-Protection                  "1; mode=block"     always;
  access_log off;     # Optional: Don't log access to assets
}

location ~ \.woff2?$ {
  try_files $uri /index.php$request_uri;
  expires 7d;     # Cache-Control policy borrowed from `.htaccess`
  access_log off; # Optional: Don't log access to assets
}

# Rule borrowed from `.htaccess`
location /remote {
  return 301 /remote.php$request_uri;
}

location / {
  try_files $uri $uri/ /index.php$request_uri;
}
